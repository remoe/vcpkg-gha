name: CMake

on: [push]

env:             
  VCPKG_BINARY_SOURCES : 'clear;nuget,GitHub,readwrite'  
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  VCPKG_VERSION: '2020.11' 

jobs:
  
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: ['windows-2019'] # , 'ubuntu-20.04'
        include:
          - os: 'windows-2019'
            triplet: 'x64-windows'
            mono: ''
            VCPKG_WORKSPACE: 'c:/vcpkg_own'
          #- os: 'ubuntu-20.04'
          #  triplet: 'x64-linux'
          #  # To run `nuget.exe` on non-Windows platforms, we must use `mono`.
          #  mono: 'mono'

    steps:       
    - uses: actions/checkout@v2
      with:
          submodules: recursive

    - name: vcpkg cache
      if: env.enabled
      id: vcpkgcache
      uses: actions/cache@v2
      with:
        path: |
          ${{ matrix.VCPKG_WORKSPACE }}
          !${{ matrix.VCPKG_WORKSPACE }}/packages
          !${{ matrix.VCPKG_WORKSPACE }}/buildtrees
          !${{ matrix.VCPKG_WORKSPACE }}/downloads
        key: vcpkg-${{ runner.os }}-${{ matrix.triplet }}  
   
    - name: Remove old vcpkg (windows)
      shell: 'bash'
      run: |
        mv  $VCPKG_INSTALLATION_ROOT c:/vcpkg_unused

    - name: Installing vcpkg (windows)
      if: steps.vcpkgcache.outputs.cache-hit != 'true'
      shell: 'bash'
      run: |
        cmake -E make_directory ${{ matrix.VCPKG_WORKSPACE }}
        cd ${{ matrix.VCPKG_WORKSPACE }}
        #git clone --branch ${{env.VCPKG_VERSION}} https://github.com/microsoft/vcpkg 
        git clone https://github.com/microsoft/vcpkg         
        git checkout tags/2020.11 vcpkg
        ./vcpkg/bootstrap-vcpkg.bat -disableMetrics
        ${{ matrix.VCPKG_WORKSPACE }}/vcpkg/vcpkg version

    # This step assumes `vcpkg` has been bootstrapped (run `./vcpkg/bootstrap-vcpkg`)
    - name: 'Setup NuGet Credentials'
      working-directory: ${{ matrix.VCPKG_WORKSPACE }}
      #if: env.enabled
      shell: 'bash'
      run: >
        ${{ matrix.mono }} `./vcpkg/vcpkg fetch nuget | tail -n 1`
        sources add
        -source "https://nuget.pkg.github.com/remoe/index.json"
        -storepasswordincleartext
        -name "GitHub"
        -username "remoe"
        -password "${{ secrets.GITHUB_TOKEN }}"

    # Omit this step if you're using manifests
    - name: 'vcpkg package restore'
      working-directory: ${{ matrix.VCPKG_WORKSPACE }}
      #if: env.enabled
      shell: 'bash'
      run: |        
        ./vcpkg/vcpkg version
        ./vcpkg/vcpkg --debug install sqlite3 --triplet ${{ matrix.triplet }} 
            
    - name: Create Build Environment
      #if: env.enabled
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: |
        cmake -E make_directory ${{runner.workspace}}/build 

    - name: Configure CMake
      #if: env.enabled
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{ runner.workspace }}/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake $GITHUB_WORKSPACE -DWIN32_USE_MP=ON -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_TOOLCHAIN_FILE=${{ matrix.VCPKG_WORKSPACE }}/vcpkg/scripts/buildsystems/vcpkg.cmake

    - name: 'Upload cmake configure log artifact'
      uses: actions/upload-artifact@v2
      if: ${{ failure() }}
      with:
        name: cmake-log
        path: |
          ${{ runner.workspace }}/build/CMakeCache.txt
        retention-days: 1

    - name: Build
      #if: env.enabled
      working-directory: ${{ runner.workspace }}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config $BUILD_TYPE
